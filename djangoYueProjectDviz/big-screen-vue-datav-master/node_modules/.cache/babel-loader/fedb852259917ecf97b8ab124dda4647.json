{"remainingRequest":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue","mtime":1703850131682},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\babel.config.js","mtime":1691760298000},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1703850127068},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1703850110565}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiQzovVXNlcnMvMTgxMTcvRGVza3RvcC9NMi9NMkJJR0RBVEEvZGphbmdvWXVlUHJvamVjdER2aXovYmlnLXNjcmVlbi12dWUtZGF0YXYtbWFzdGVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvMTgxMTcvRGVza3RvcC9NMi9NMkJJR0RBVEEvZGphbmdvWXVlUHJvamVjdER2aXovYmlnLXNjcmVlbi12dWUtZGF0YXYtbWFzdGVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnOwppbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZQZXJjZW50UG9uZCcsCiAgcHJvcHM6IHsKICAgIGNvbmZpZzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciBpZCA9IHV1aWQoKTsKICAgIHJldHVybiB7CiAgICAgIGdyYWRpZW50SWQxOiAicGVyY2VudC1wb25kLWdyYWRpZW50SWQxLSIuY29uY2F0KGlkKSwKICAgICAgZ3JhZGllbnRJZDI6ICJwZXJjZW50LXBvbmQtZ3JhZGllbnRJZDItIi5jb25jYXQoaWQpLAogICAgICB3aWR0aDogMCwKICAgICAgaGVpZ2h0OiAwLAogICAgICBkZWZhdWx0Q29uZmlnOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhbHVlCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCB2YWx1ZSA9IDAKICAgICAgICAgKi8KICAgICAgICB2YWx1ZTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29sb3JzIChoZXh8cmdifHJnYmF8Y29sb3Iga2V5d29yZHMpCiAgICAgICAgICogQHR5cGUge0FycmF5PFN0cmluZz59CiAgICAgICAgICogQGRlZmF1bHQgY29sb3JzID0gWycjMDBCQUZGJywgJyMzREU3QzknXQogICAgICAgICAqIEBleGFtcGxlIGNvbG9ycyA9IFsnIzAwMCcsICdyZ2IoMCwgMCwgMCknLCAncmdiYSgwLCAwLCAwLCAxKScsICdyZWQnXQogICAgICAgICAqLwogICAgICAgIGNvbG9yczogWycjM0RFN0M5JywgJyMwMEJBRkYnXSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9yZGVyIHdpZHRoCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJXaWR0aCA9IDMKICAgICAgICAgKi8KICAgICAgICBib3JkZXJXaWR0aDogMywKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2FwIGJldHdlZW4gYm9yZGVyIGFuZCBwb25kCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJHYXAgPSAzCiAgICAgICAgICovCiAgICAgICAgYm9yZGVyR2FwOiAzLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBMaW5lIGRhc2gKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBsaW5lRGFzaCA9IFs1LCAxXQogICAgICAgICAqLwogICAgICAgIGxpbmVEYXNoOiBbNSwgMV0sCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRleHQgY29sb3IKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IHRleHRDb2xvciA9ICcjZmZmJwogICAgICAgICAqLwogICAgICAgIHRleHRDb2xvcjogJyNmZmYnLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb3JkZXIgcmFkaXVzCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJSYWRpdXMgPSA1CiAgICAgICAgICovCiAgICAgICAgYm9yZGVyUmFkaXVzOiA1LAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBMb2NhbCBHcmFkaWVudAogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IGxvY2FsR3JhZGllbnQgPSBmYWxzZQogICAgICAgICAqIEBleGFtcGxlIGxvY2FsR3JhZGllbnQgPSBmYWxzZSB8IHRydWUKICAgICAgICAgKi8KICAgICAgICBsb2NhbEdyYWRpZW50OiBmYWxzZSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9ybWF0dGVyCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBmb3JtYXR0ZXIgPSAne3ZhbHVlfSUnCiAgICAgICAgICovCiAgICAgICAgZm9ybWF0dGVyOiAne3ZhbHVlfSUnCiAgICAgIH0sCiAgICAgIG1lcmdlZENvbmZpZzogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICByZWN0V2lkdGg6IGZ1bmN0aW9uIHJlY3RXaWR0aCgpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgIHdpZHRoID0gdGhpcy53aWR0aDsKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybiAwOwogICAgICB2YXIgYm9yZGVyV2lkdGggPSBtZXJnZWRDb25maWcuYm9yZGVyV2lkdGg7CiAgICAgIHJldHVybiB3aWR0aCAtIGJvcmRlcldpZHRoOwogICAgfSwKICAgIHJlY3RIZWlnaHQ6IGZ1bmN0aW9uIHJlY3RIZWlnaHQoKSB7CiAgICAgIHZhciBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybiAwOwogICAgICB2YXIgYm9yZGVyV2lkdGggPSBtZXJnZWRDb25maWcuYm9yZGVyV2lkdGg7CiAgICAgIHJldHVybiBoZWlnaHQgLSBib3JkZXJXaWR0aDsKICAgIH0sCiAgICBwb2ludHM6IGZ1bmN0aW9uIHBvaW50cygpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgIHdpZHRoID0gdGhpcy53aWR0aCwKICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuICIwLCAiLmNvbmNhdChoYWxmSGVpZ2h0LCAiIDAsICIpLmNvbmNhdChoYWxmSGVpZ2h0KTsKICAgICAgdmFyIGJvcmRlcldpZHRoID0gbWVyZ2VkQ29uZmlnLmJvcmRlcldpZHRoLAogICAgICAgIGJvcmRlckdhcCA9IG1lcmdlZENvbmZpZy5ib3JkZXJHYXAsCiAgICAgICAgdmFsdWUgPSBtZXJnZWRDb25maWcudmFsdWU7CiAgICAgIHZhciBwb2x5bGluZUxlbmd0aCA9ICh3aWR0aCAtIChib3JkZXJXaWR0aCArIGJvcmRlckdhcCkgKiAyKSAvIDEwMCAqIHZhbHVlOwogICAgICByZXR1cm4gIlxuICAgICAgICAiLmNvbmNhdChib3JkZXJXaWR0aCArIGJvcmRlckdhcCwgIiwgIikuY29uY2F0KGhhbGZIZWlnaHQsICJcbiAgICAgICAgIikuY29uY2F0KGJvcmRlcldpZHRoICsgYm9yZGVyR2FwICsgcG9seWxpbmVMZW5ndGgsICIsICIpLmNvbmNhdChoYWxmSGVpZ2h0ICsgMC4wMDEsICJcbiAgICAgICIpOwogICAgfSwKICAgIHBvbHlsaW5lV2lkdGg6IGZ1bmN0aW9uIHBvbHlsaW5lV2lkdGgoKSB7CiAgICAgIHZhciBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybiAwOwogICAgICB2YXIgYm9yZGVyV2lkdGggPSBtZXJnZWRDb25maWcuYm9yZGVyV2lkdGgsCiAgICAgICAgYm9yZGVyR2FwID0gbWVyZ2VkQ29uZmlnLmJvcmRlckdhcDsKICAgICAgcmV0dXJuIGhlaWdodCAtIChib3JkZXJXaWR0aCArIGJvcmRlckdhcCkgKiAyOwogICAgfSwKICAgIGxpbmVhckdyYWRpZW50OiBmdW5jdGlvbiBsaW5lYXJHcmFkaWVudCgpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIFtdOwogICAgICB2YXIgY29sb3JzID0gbWVyZ2VkQ29uZmlnLmNvbG9yczsKICAgICAgdmFyIGNvbG9yTnVtID0gY29sb3JzLmxlbmd0aDsKICAgICAgdmFyIGNvbG9yT2Zmc2V0R2FwID0gMTAwIC8gKGNvbG9yTnVtIC0gMSk7CiAgICAgIHJldHVybiBjb2xvcnMubWFwKGZ1bmN0aW9uIChjLCBpKSB7CiAgICAgICAgcmV0dXJuIFtjb2xvck9mZnNldEdhcCAqIGksIGNdOwogICAgICB9KTsKICAgIH0sCiAgICBwb2x5bGluZUdyYWRpZW50OiBmdW5jdGlvbiBwb2x5bGluZUdyYWRpZW50KCkgewogICAgICB2YXIgZ3JhZGllbnRJZDEgPSB0aGlzLmdyYWRpZW50SWQxLAogICAgICAgIGdyYWRpZW50SWQyID0gdGhpcy5ncmFkaWVudElkMiwKICAgICAgICBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZzsKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybiBncmFkaWVudElkMjsKICAgICAgaWYgKG1lcmdlZENvbmZpZy5sb2NhbEdyYWRpZW50KSByZXR1cm4gZ3JhZGllbnRJZDE7CiAgICAgIHJldHVybiBncmFkaWVudElkMjsKICAgIH0sCiAgICBncmFkaWVudDJYUG9zOiBmdW5jdGlvbiBncmFkaWVudDJYUG9zKCkgewogICAgICB2YXIgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWc7CiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gJzEwMCUnOwogICAgICB2YXIgdmFsdWUgPSBtZXJnZWRDb25maWcudmFsdWU7CiAgICAgIHJldHVybiAiIi5jb25jYXQoMjAwIC0gdmFsdWUsICIlIik7CiAgICB9LAogICAgZGV0YWlsczogZnVuY3Rpb24gZGV0YWlscygpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuICcnOwogICAgICB2YXIgdmFsdWUgPSBtZXJnZWRDb25maWcudmFsdWUsCiAgICAgICAgZm9ybWF0dGVyID0gbWVyZ2VkQ29uZmlnLmZvcm1hdHRlcjsKICAgICAgcmV0dXJuIGZvcm1hdHRlci5yZXBsYWNlKCd7dmFsdWV9JywgdmFsdWUpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKCkgewogICAgICB2YXIgbWVyZ2VDb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnOwogICAgICBtZXJnZUNvbmZpZygpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgaW5pdFdILCBjb25maWcsIG1lcmdlQ29uZmlnOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGluaXRXSCA9IF90aGlzLmluaXRXSCwgY29uZmlnID0gX3RoaXMuY29uZmlnLCBtZXJnZUNvbmZpZyA9IF90aGlzLm1lcmdlQ29uZmlnOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBpbml0V0goKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGlmIChjb25maWcpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgbWVyZ2VDb25maWcoKTsKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGluaXRXSDogZnVuY3Rpb24gaW5pdFdIKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyICRuZXh0VGljaywgJHJlZnMsIF8kcmVmcyRwZXJjZW50UG9uZCwgY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodDsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgJG5leHRUaWNrID0gX3RoaXMyLiRuZXh0VGljaywgJHJlZnMgPSBfdGhpczIuJHJlZnM7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiAkbmV4dFRpY2soKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIF8kcmVmcyRwZXJjZW50UG9uZCA9ICRyZWZzWydwZXJjZW50LXBvbmQnXSwgY2xpZW50V2lkdGggPSBfJHJlZnMkcGVyY2VudFBvbmQuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCA9IF8kcmVmcyRwZXJjZW50UG9uZC5jbGllbnRIZWlnaHQ7CiAgICAgICAgICAgICAgX3RoaXMyLndpZHRoID0gY2xpZW50V2lkdGg7CiAgICAgICAgICAgICAgX3RoaXMyLmhlaWdodCA9IGNsaWVudEhlaWdodDsKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgbWVyZ2VDb25maWc6IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKCkgewogICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsCiAgICAgICAgZGVmYXVsdENvbmZpZyA9IHRoaXMuZGVmYXVsdENvbmZpZzsKICAgICAgdGhpcy5tZXJnZWRDb25maWcgPSBkZWVwTWVyZ2UoZGVlcENsb25lKGRlZmF1bHRDb25maWcsIHRydWUpLCBjb25maWcgfHwge30pOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBpbml0ID0gdGhpcy5pbml0OwogICAgaW5pdCgpOwogIH0KfTs="},{"version":3,"mappings":";;;;;;AA8CA;AAEA;AAEA;AAEA;EACAA;EACAC;IACAC;MACAC;MACAC;QAAA;MAAA;IACA;EACA;EACAC;IACA;IACA;MACAC;MACAC;MAEAC;MACAC;MAEAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;MACA;MAEAC;IACA;EACA;EACAC;IACAC;MACA;QAAAd;MAEA;MAEA;MAEA;IACA;IACAe;MACA;QAAAd;MAEA;MAEA;MAEA;IACA;IACAe;MACA;QAAAhB;QAAAC;MAEA;MAEA;MAEA;QAAAK;QAAAH;MAEA;MAEA,2BACAE,uEACAA;IAEA;IACAY;MACA;QAAAhB;MAEA;MAEA;QAAAK;MAEA;IACA;IACAY;MACA;MAEA;MAEA;MAEA;MAEA;MAEA;QAAA;MAAA;IACA;IACAC;MACA;QAAApB;QAAAa;MAEA;MAEA;MAEA;IACA;IACAQ;MACA;MAEA;MAEA;MAEA;IACA;IACAC;MACA;MAEA;MAEA;QAAAV;MAEA;IACA;EACA;EACAW;IACA5B;MACA;MAEA6B;IACA;EACA;EACAC;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cACAC;cAAAC;cAAA,OAEAD;YAAA;cAAA,IAEAhC;gBAAAiC;gBAAA;cAAA;cAAA;YAAA;cAEAJ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;IACAG;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cACAE;cAAAC;cAAA,OAEAD;YAAA;cAAAE,qBAEAC;cAEAC;cACAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IACA;IACAT;MACA;QAAArB;MAEA;IACA;EACA;EACA+B;IACA;IAEAR;EACA;AACA","names":["name","props","config","type","default","data","gradientId1","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","polylineWidth","linearGradient","polylineGradient","gradient2XPos","details","watch","mergeConfig","methods","init","initWH","_context","$nextTick","_context2","_$refs$percentPond","$refs","_this2","mounted"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]}]}