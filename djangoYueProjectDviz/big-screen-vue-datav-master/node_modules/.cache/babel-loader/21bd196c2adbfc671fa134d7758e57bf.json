{"remainingRequest":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration5\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration5\\src\\main.vue","mtime":1703850131668},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\babel.config.js","mtime":1691760298000},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1703850127068},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1703850110565}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCBhdXRvUmVzaXplIGZyb20gJy4uLy4uLy4uL21peGluL2F1dG9SZXNpemUnOwppbXBvcnQgeyBnZXRQb2x5bGluZUxlbmd0aCB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsJzsKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnOwppbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZEZWNvcmF0aW9uNScsCiAgbWl4aW5zOiBbYXV0b1Jlc2l6ZV0sCiAgcHJvcHM6IHsKICAgIGNvbG9yOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0sCiAgICBkdXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxLjIKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByZWY6ICdkZWNvcmF0aW9uLTUnLAogICAgICBsaW5lMVBvaW50czogJycsCiAgICAgIGxpbmUyUG9pbnRzOiAnJywKICAgICAgbGluZTFMZW5ndGg6IDAsCiAgICAgIGxpbmUyTGVuZ3RoOiAwLAogICAgICBkZWZhdWx0Q29sb3I6IFsnIzNmOTZhNScsICcjM2Y5NmE1J10sCiAgICAgIG1lcmdlZENvbG9yOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBjb2xvcjogZnVuY3Rpb24gY29sb3IoKSB7CiAgICAgIHZhciBtZXJnZUNvbG9yID0gdGhpcy5tZXJnZUNvbG9yOwogICAgICBtZXJnZUNvbG9yKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZnRlckF1dG9SZXNpemVNaXhpbkluaXQ6IGZ1bmN0aW9uIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCgpIHsKICAgICAgdmFyIGNhbGNTVkdEYXRhID0gdGhpcy5jYWxjU1ZHRGF0YTsKICAgICAgY2FsY1NWR0RhdGEoKTsKICAgIH0sCiAgICBjYWxjU1ZHRGF0YTogZnVuY3Rpb24gY2FsY1NWR0RhdGEoKSB7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7CiAgICAgIHZhciBsaW5lMVBvaW50cyA9IFtbMCwgaGVpZ2h0ICogMC4yXSwgW3dpZHRoICogMC4xOCwgaGVpZ2h0ICogMC4yXSwgW3dpZHRoICogMC4yLCBoZWlnaHQgKiAwLjRdLCBbd2lkdGggKiAwLjI1LCBoZWlnaHQgKiAwLjRdLCBbd2lkdGggKiAwLjI3LCBoZWlnaHQgKiAwLjZdLCBbd2lkdGggKiAwLjcyLCBoZWlnaHQgKiAwLjZdLCBbd2lkdGggKiAwLjc1LCBoZWlnaHQgKiAwLjRdLCBbd2lkdGggKiAwLjgsIGhlaWdodCAqIDAuNF0sIFt3aWR0aCAqIDAuODIsIGhlaWdodCAqIDAuMl0sIFt3aWR0aCwgaGVpZ2h0ICogMC4yXV07CiAgICAgIHZhciBsaW5lMlBvaW50cyA9IFtbd2lkdGggKiAwLjMsIGhlaWdodCAqIDAuOF0sIFt3aWR0aCAqIDAuNywgaGVpZ2h0ICogMC44XV07CiAgICAgIHZhciBsaW5lMUxlbmd0aCA9IGdldFBvbHlsaW5lTGVuZ3RoKGxpbmUxUG9pbnRzKTsKICAgICAgdmFyIGxpbmUyTGVuZ3RoID0gZ2V0UG9seWxpbmVMZW5ndGgobGluZTJQb2ludHMpOwogICAgICBsaW5lMVBvaW50cyA9IGxpbmUxUG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgICByZXR1cm4gcG9pbnQuam9pbignLCcpOwogICAgICB9KS5qb2luKCcgJyk7CiAgICAgIGxpbmUyUG9pbnRzID0gbGluZTJQb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgewogICAgICAgIHJldHVybiBwb2ludC5qb2luKCcsJyk7CiAgICAgIH0pLmpvaW4oJyAnKTsKICAgICAgdGhpcy5saW5lMVBvaW50cyA9IGxpbmUxUG9pbnRzOwogICAgICB0aGlzLmxpbmUyUG9pbnRzID0gbGluZTJQb2ludHM7CiAgICAgIHRoaXMubGluZTFMZW5ndGggPSBsaW5lMUxlbmd0aDsKICAgICAgdGhpcy5saW5lMkxlbmd0aCA9IGxpbmUyTGVuZ3RoOwogICAgfSwKICAgIG9uUmVzaXplOiBmdW5jdGlvbiBvblJlc2l6ZSgpIHsKICAgICAgdmFyIGNhbGNTVkdEYXRhID0gdGhpcy5jYWxjU1ZHRGF0YTsKICAgICAgY2FsY1NWR0RhdGEoKTsKICAgIH0sCiAgICBtZXJnZUNvbG9yOiBmdW5jdGlvbiBtZXJnZUNvbG9yKCkgewogICAgICB2YXIgY29sb3IgPSB0aGlzLmNvbG9yLAogICAgICAgIGRlZmF1bHRDb2xvciA9IHRoaXMuZGVmYXVsdENvbG9yOwogICAgICB0aGlzLm1lcmdlZENvbG9yID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29sb3IsIHRydWUpLCBjb2xvciB8fCBbXSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIG1lcmdlQ29sb3IgPSB0aGlzLm1lcmdlQ29sb3I7CiAgICBtZXJnZUNvbG9yKCk7CiAgfQp9Ow=="},{"version":3,"mappings":";;;AA8CA;AAEA;AAEA;AAEA;AAEA;EACAA;EACAC;EACAC;IACAC;MACAC;MACAC;QAAA;MAAA;IACA;IACAC;MACAF;MACAC;IACA;EACA;EACAE;IACA;MACAC;MAEAC;MACAC;MAEAC;MACAC;MAEAC;MAEAC;IACA;EACA;EACAC;IACAZ;MACA;MAEAa;IACA;EACA;EACAC;IACAC;MACA;MAEAC;IACA;IACAA;MACA;QAAAC;MAEA,mBACA,4GACA,0FACA,iFACA;MAEA,mBACA,yDACA;MAEA;MACA;MAEAX;QAAA;MAAA;MACAC;QAAA;MAAA;MAEA;MACA;MAEA;MACA;IACA;IACAW;MACA;MAEAF;IACA;IACAH;MACA;QAAAH;MAEA;IACA;EACA;EACAS;IACA;IAEAN;EACA;AACA","names":["name","mixins","props","color","type","default","dur","data","ref","line1Points","line2Points","line1Length","line2Length","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","height","onResize","mounted"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration5/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-5\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[0]\"\n        stroke-width=\"3\"\n        :points=\"line1Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line1Length / 2}, 0, ${line1Length / 2}`\"\n          :to=\"`0, 0, ${line1Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.4,1,0.49,0.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        :points=\"line2Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line2Length / 2}, 0, ${line2Length / 2}`\"\n          :to=\"`0, 0, ${line2Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".4,1,.49,.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { getPolylineLength } from '@jiaminghi/charts/lib/util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration5',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    dur: {\n      type: Number,\n      default: 1.2\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-5',\n\n      line1Points: '',\n      line2Points: '',\n\n      line1Length: 0,\n      line2Length: 0,\n\n      defaultColor: ['#3f96a5', '#3f96a5'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { width, height } = this\n\n      let line1Points = [\n        [0, height * 0.2], [width * 0.18, height * 0.2], [width * 0.2, height * 0.4], [width * 0.25, height * 0.4],\n        [width * 0.27, height * 0.6], [width * 0.72, height * 0.6], [width * 0.75, height * 0.4],\n        [width * 0.8, height * 0.4], [width * 0.82, height * 0.2], [width, height * 0.2]\n      ]\n\n      let line2Points = [\n        [width * 0.3, height * 0.8], [width * 0.7, height * 0.8]\n      ]\n\n      const line1Length = getPolylineLength(line1Points)\n      const line2Length = getPolylineLength(line2Points)\n\n      line1Points = line1Points.map(point => point.join(',')).join(' ')\n      line2Points = line2Points.map(point => point.join(',')).join(' ')\n\n      this.line1Points = line1Points\n      this.line2Points = line2Points\n\n      this.line1Length = line1Length\n      this.line2Length = line2Length\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]}]}