{"remainingRequest":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\src\\components\\echart\\centerLeft\\centerLeft2Chart\\chart.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\src\\components\\echart\\centerLeft\\centerLeft2Chart\\chart.vue","mtime":1691760298000},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\babel.config.js","mtime":1691760298000},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1703850127068},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1703850110565}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;AAaA;AACA;EACAA;IACA;MACAC;IACA;EACA;EACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;QAAA;MAAA;IACA;EACA;EACAC;IACAH;MACAI;QACA;QACA;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACA,kBACA;UACAC;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,GACA;UACAA;QACA,EACA;QACA;UACA;UACA;YACA;YACA;cACAC;gBACAD;gBACAE;cACA;YACA;UACA;UACA;QACA;QACA;UACAC;UACAC;YACAC;YACAC;cACAC;cACAC;YACA;YACAC;cACA;cACA;YACA;YACA;YACA;AACA;AACA;AACA;AACA;UACA;UACAC;YACAC;YACAC;YACAC;YACAC;YACA;YACAC;cACAC;YACA;UACA;UACA;UACAC;YACAJ;YACAK;YAAA;YACAC;YACAC;YACAC;YACAC;YACAC;YACAC;cACAC;gBACAC;gBACAC;gBACAC;gBACAC;cACA;cACAC;gBACAJ;cACA;YACA;UACA;UACAK,SACA;YACA/B;YACAb;YACA+B;YAAA;YACAC;YACAa;YAAA;YACAZ;YACAC;YACAG;cACAC;gBACAT;gBACAU;gBACAO;gBACAC;gBACAC;gBACAR;cACA;cACAG;gBACAJ;gBACAO;gBACAC;gBACAC;gBACAR;cACA;YACA;YACAS;cACAC;gBAAA;cAAA;cACAxB;cACAJ;cACAH;gBACAC;gBACAS;cACA;cACAc;gBACAxB;kBACAU;gBACA;cACA;YACA;YACAnC;UACA,GACA;YACAM;YACAmD;YACAC;YACAC;YACAC;YACAC;YACAC;cACAC;cACAC;cACAC;YACA;YACAC;YACAvB;cACAC;gBACAT;gBACAmB;gBACAR;cACA;YACA;YACA9C;UACA;QAEA;QACA;QACA;MACA;MACAmE;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;QACAC;MACA;IACA;IACA;IACAC;MAAA;MACA;MACA;QACA;UACA;UACA;UACA;YACAC;UACA;UACAjC;YACAnC;YACA2B;YACA0C;UACA;UACAlC;YACAnC;YACA2B;YACA0C;UACA;UACAlC;YACAnC;YACA2B;YACA0C;UACA;UACAC;QACA;UACAC;QACA;MACA;IACA;IACAC;MAAA;MACA;QACA;UACA;UACA;UACAC;YACAP;UACA;UACA;UACA/B;YACA8B;YACA9B;cACAnC;cACA2B;cACA0C;YACA;YACAlC;cACAnC;cACA2B;cACA0C;YACA;YACAH;UACA;UACA;UACA/B;YACA+B;YACAA;UACA;UACAQ;QACA;UACAH;QACA;MACA;IACA;EACA;AACA","names":["data","options","components","Echart","props","cdata","type","default","watch","handler","厦门市","福州市","泉州市","漳州市","龙岩市","莆田市","三明市","南平市","宁德市","name","scatterData","value","showLegendSymbol","tooltip","trigger","textStyle","fontSize","lineHeight","position","visualMap","min","max","show","seriesIndex","inRange","color","geo","aspectScale","zoom","top","left","map","roam","itemStyle","normal","areaColor","shadowColor","shadowOffsetX","shadowOffsetY","emphasis","series","mapType","borderColor","borderWidth","shadowBlur","label","formatter","coordinateSystem","symbolSize","effectType","legendHoverLink","showEffectOn","rippleEffect","period","scale","brushType","zlevel","immediate","deep","methods","startInterval","clearInterval","_self","reSelectMapRandomArea","index","dataIndex","_this","console","handleMapRandomSelect","setTimeout","_this2"],"sourceRoot":"src/components/echart/centerLeft/centerLeft2Chart","sources":["chart.vue"],"sourcesContent":["<template>\n  <div>\n    <Echart\n      id=\"centreLeft2Chart\"\n      ref=\"centreLeft2ChartRef\"\n      :options=\"options\"\n      height=\"360px\"\n      width=\"330px\"\n    ></Echart>\n  </div>\n</template>\n\n<script>\nimport Echart from '@/common/echart';\nexport default {\n  data() {\n    return {\n      options: {},\n    };\n  },\n  components: {\n    Echart,\n  },\n  props: {\n    cdata: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  watch: {\n    cdata: {\n      handler(newData) {\n        // 设置点的位置(经纬度)\n        const geoCoordMap = {\n          厦门市: [118.11022, 24.490474, 20],\n          福州市: [119.206239, 26.275302, 20],\n          泉州市: [118.589421, 24.908853, 20],\n          漳州市: [117.561801, 24.510897, 20],\n          龙岩市: [116.82978, 25.391603, 20],\n          莆田市: [119.007558, 25.591011, 20],\n          三明市: [117.435001, 26.465444, 20],\n          南平市: [118.178459, 27.535627, 20],\n          宁德市: [119.527082, 27.15924, 20],\n        };\n        let seriesData = [\n          {\n            name: '厦门市',\n          },\n          {\n            name: '福州市',\n          },\n          {\n            name: '泉州市',\n          },\n          {\n            name: '漳州市',\n          },\n          {\n            name: '龙岩市',\n          },\n          {\n            name: '莆田市',\n          },\n          {\n            name: '三明市',\n          },\n          {\n            name: '南平市',\n          },\n          {\n            name: '宁德市',\n          },\n        ];\n        let convertData = function (data) {\n          let scatterData = [];\n          for (var i = 0; i < data.length; i++) {\n            var geoCoord = geoCoordMap[data[i].name];\n            if (geoCoord) {\n              scatterData.push({\n                name: data[i].name,\n                value: geoCoord.concat(data[i].value),\n              });\n            }\n          }\n          return scatterData;\n        };\n        this.options = {\n          showLegendSymbol: true,\n          tooltip: {\n            trigger: 'item',\n            textStyle: {\n              fontSize: 14,\n              lineHeight: 22,\n            },\n            position: point => {\n              // 固定在顶部\n              return [point[0] + 50, point[1] - 20];\n            },\n            // 如果需要自定义 tooltip样式，需要使用formatter\n            /*\n              formatter: params => {\n                return `<div style=\"\"> ... </div>`\n              }\n            */\n          },\n          visualMap: {\n            min: 0,\n            max: 10,\n            show: false,\n            seriesIndex: 0,\n            // 颜色\n            inRange: {\n              color: ['rgba(41,166,206, .5)', 'rgba(69,117,245, .9)'],\n            },\n          },\n          // 底部背景\n          geo: {\n            show: true,\n            aspectScale: 0.85, //长宽比\n            zoom: 1.2,\n            top: '10%',\n            left: '16%',\n            map: '福建',\n            roam: false,\n            itemStyle: {\n              normal: {\n                areaColor: 'rgba(0,0,0,0)',\n                shadowColor: 'rgba(7,114,204, .8)',\n                shadowOffsetX: 5,\n                shadowOffsetY: 5,\n              },\n              emphasis: {\n                areaColor: '#00aeef',\n              },\n            },\n          },\n          series: [\n            {\n              name: '相关指数',\n              type: 'map',\n              aspectScale: 0.85, //长宽比\n              zoom: 1.2,\n              mapType: '福建', // 自定义扩展图表类型\n              top: '10%',\n              left: '16%',\n              itemStyle: {\n                normal: {\n                  color: 'red',\n                  areaColor: 'rgba(19,54,162, .5)',\n                  borderColor: 'rgba(0,242,252,.3)',\n                  borderWidth: 1,\n                  shadowBlur: 7,\n                  shadowColor: '#00f2fc',\n                },\n                emphasis: {\n                  areaColor: '#4f7fff',\n                  borderColor: 'rgba(0,242,252,.6)',\n                  borderWidth: 2,\n                  shadowBlur: 10,\n                  shadowColor: '#00f2fc',\n                },\n              },\n              label: {\n                formatter: params => `${params.name}`,\n                show: true,\n                position: 'insideRight',\n                textStyle: {\n                  fontSize: 14,\n                  color: '#efefef',\n                },\n                emphasis: {\n                  textStyle: {\n                    color: '#fff',\n                  },\n                },\n              },\n              data: newData,\n            },\n            {\n              type: 'effectScatter',\n              coordinateSystem: 'geo',\n              symbolSize: 7,\n              effectType: 'ripple',\n              legendHoverLink: false,\n              showEffectOn: 'render',\n              rippleEffect: {\n                period: 4,\n                scale: 2.5,\n                brushType: 'stroke',\n              },\n              zlevel: 1,\n              itemStyle: {\n                normal: {\n                  color: '#99FBFE',\n                  shadowBlur: 5,\n                  shadowColor: '#fff',\n                },\n              },\n              data: convertData(seriesData),\n            },\n          ],\n        };\n        // 重新选择区域\n        this.handleMapRandomSelect();\n      },\n      immediate: true,\n      deep: true,\n    },\n  },\n  methods: {\n    // 开启定时器\n    startInterval() {\n      const _self = this;\n      // 应通过接口获取配置时间，暂时写死5s\n      const time = 2000;\n      if (this.intervalId !== null) {\n        clearInterval(this.intervalId);\n      }\n      this.intervalId = setInterval(() => {\n        _self.reSelectMapRandomArea();\n      }, time);\n    },\n    // 重新随机选中地图区域\n    reSelectMapRandomArea() {\n      const length = 9;\n      this.$nextTick(() => {\n        try {\n          const map = this.$refs.centreLeft2ChartRef.chart;\n          let index = Math.floor(Math.random() * length);\n          while (index === this.preSelectMapIndex || index >= length) {\n            index = Math.floor(Math.random() * length);\n          }\n          map.dispatchAction({\n            type: 'mapUnSelect',\n            seriesIndex: 0,\n            dataIndex: this.preSelectMapIndex,\n          });\n          map.dispatchAction({\n            type: 'showTip',\n            seriesIndex: 0,\n            dataIndex: index,\n          });\n          map.dispatchAction({\n            type: 'mapSelect',\n            seriesIndex: 0,\n            dataIndex: index,\n          });\n          this.preSelectMapIndex = index;\n        } catch (error) {\n          console.log(error)\n        }\n      });\n    },\n    handleMapRandomSelect() {\n      this.$nextTick(() => {\n        try {\n          const map = this.$refs.centreLeft2ChartRef.chart;\n          const _self = this;\n          setTimeout(() => {\n            _self.reSelectMapRandomArea();\n          }, 0);\n          // 移入区域，清除定时器、取消之前选中并选中当前\n          map.on('mouseover', function (params) {\n            clearInterval(_self.intervalId);\n            map.dispatchAction({\n              type: 'mapUnSelect',\n              seriesIndex: 0,\n              dataIndex: _self.preSelectMapIndex,\n            });\n            map.dispatchAction({\n              type: 'mapSelect',\n              seriesIndex: 0,\n              dataIndex: params.dataIndex,\n            });\n            _self.preSelectMapIndex = params.dataIndex;\n          });\n          // 移出区域重新随机选中地图区域，并开启定时器\n          map.on('globalout', function () {\n            _self.reSelectMapRandomArea();\n            _self.startInterval();\n          });\n          this.startInterval();\n        } catch (error) {\n          console.log(error)\n        }\n      });\n    },\n  },\n};\n</script>\n"]}]}