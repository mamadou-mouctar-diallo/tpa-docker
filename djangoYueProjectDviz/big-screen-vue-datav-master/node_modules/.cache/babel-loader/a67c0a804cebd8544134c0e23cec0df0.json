{"remainingRequest":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue","mtime":1703850131662},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\babel.config.js","mtime":1691760298000},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1703850127068},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703850126584},{"path":"C:\\Users\\18117\\Desktop\\M2\\M2BIGDATA\\djangoYueProjectDviz\\big-screen-vue-datav-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1703850110565}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkM6L1VzZXJzLzE4MTE3L0Rlc2t0b3AvTTIvTTJCSUdEQVRBL2RqYW5nb1l1ZVByb2plY3REdml6L2JpZy1zY3JlZW4tdnVlLWRhdGF2LW1hc3Rlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0IGF1dG9SZXNpemUgZnJvbSAnLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSc7CmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnOwppbXBvcnQgeyBkZWVwQ2xvbmUsIGdldENpcmNsZVJhZGlhblBvaW50IH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnOwppbXBvcnQgeyBmYWRlIH0gZnJvbSAnQGppYW1pbmdoaS9jb2xvcic7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZEZWNvcmF0aW9uMTInLAogIG1peGluczogW2F1dG9SZXNpemVdLAogIHByb3BzOiB7CiAgICBjb2xvcjogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiBAZGVzY3JpcHRpb24gU2NhbiBhbmltYXRpb24gZHVyCiAgICAgKi8KICAgIHNjYW5EdXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAzCiAgICB9LAogICAgLyoqCiAgICAgKiBAZGVzY3JpcHRpb24gSGFsbyBhbmltYXRpb24gZHVyCiAgICAgKi8KICAgIGhhbG9EdXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAyCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIGlkID0gdXVpZCgpOwogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnZGVjb3JhdGlvbi0xMicsCiAgICAgIGdJZDogImRlY29yYXRpb24tMTItZy0iLmNvbmNhdChpZCksCiAgICAgIGdyYWRpZW50SWQ6ICJkZWNvcmF0aW9uLTEyLWdyYWRpZW50LSIuY29uY2F0KGlkKSwKICAgICAgZGVmYXVsdENvbG9yOiBbJyMyNzgzY2UnLCAnIzJjZjdmZSddLAogICAgICBtZXJnZWRDb2xvcjogW10sCiAgICAgIHBhdGhEOiBbXSwKICAgICAgcGF0aENvbG9yOiBbXSwKICAgICAgY2lyY2xlUjogW10sCiAgICAgIHNwbGl0TGluZVBvaW50czogW10sCiAgICAgIGFyY0Q6IFtdLAogICAgICBzZWdtZW50OiAzMCwKICAgICAgc2VjdG9yQW5nbGU6IE1hdGguUEkgLyAzLAogICAgICByaW5nTnVtOiAzLAogICAgICByaW5nV2lkdGg6IDEsCiAgICAgIHNob3dTcGxpdExpbmU6IHRydWUKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKCkgewogICAgICB2YXIgbWVyZ2VDb2xvciA9IHRoaXMubWVyZ2VDb2xvcjsKICAgICAgbWVyZ2VDb2xvcigpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHg6IGZ1bmN0aW9uIHgoKSB7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgIHJldHVybiB3aWR0aCAvIDI7CiAgICB9LAogICAgeTogZnVuY3Rpb24geSgpIHsKICAgICAgdmFyIGhlaWdodCA9IHRoaXMuaGVpZ2h0OwogICAgICByZXR1cm4gaGVpZ2h0IC8gMjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIHZhciBtZXJnZUNvbG9yID0gdGhpcy5tZXJnZUNvbG9yLAogICAgICAgIGNhbGNQYXRoRCA9IHRoaXMuY2FsY1BhdGhELAogICAgICAgIGNhbGNQYXRoQ29sb3IgPSB0aGlzLmNhbGNQYXRoQ29sb3IsCiAgICAgICAgY2FsY0NpcmNsZVIgPSB0aGlzLmNhbGNDaXJjbGVSLAogICAgICAgIGNhbGNTcGxpdExpbmVQb2ludHMgPSB0aGlzLmNhbGNTcGxpdExpbmVQb2ludHMsCiAgICAgICAgY2FsY0FyY0QgPSB0aGlzLmNhbGNBcmNEOwogICAgICBtZXJnZUNvbG9yKCk7CiAgICAgIGNhbGNQYXRoRCgpOwogICAgICBjYWxjUGF0aENvbG9yKCk7CiAgICAgIGNhbGNDaXJjbGVSKCk7CiAgICAgIGNhbGNTcGxpdExpbmVQb2ludHMoKTsKICAgICAgY2FsY0FyY0QoKTsKICAgIH0sCiAgICBtZXJnZUNvbG9yOiBmdW5jdGlvbiBtZXJnZUNvbG9yKCkgewogICAgICB2YXIgY29sb3IgPSB0aGlzLmNvbG9yLAogICAgICAgIGRlZmF1bHRDb2xvciA9IHRoaXMuZGVmYXVsdENvbG9yOwogICAgICB0aGlzLm1lcmdlZENvbG9yID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29sb3IsIHRydWUpLCBjb2xvciB8fCBbXSk7CiAgICB9LAogICAgY2FsY1BhdGhEOiBmdW5jdGlvbiBjYWxjUGF0aEQoKSB7CiAgICAgIHZhciB4ID0gdGhpcy54LAogICAgICAgIHkgPSB0aGlzLnksCiAgICAgICAgd2lkdGggPSB0aGlzLndpZHRoLAogICAgICAgIHNlZ21lbnQgPSB0aGlzLnNlZ21lbnQsCiAgICAgICAgc2VjdG9yQW5nbGUgPSB0aGlzLnNlY3RvckFuZ2xlOwogICAgICB2YXIgc3RhcnRBbmdsZSA9IC1NYXRoLlBJIC8gMjsKICAgICAgdmFyIGFuZ2xlR2FwID0gc2VjdG9yQW5nbGUgLyBzZWdtZW50OwogICAgICB2YXIgciA9IHdpZHRoIC8gNDsKICAgICAgdmFyIGxhc3RFbmRQb2ludHMgPSBnZXRDaXJjbGVSYWRpYW5Qb2ludCh4LCB5LCByLCBzdGFydEFuZ2xlKTsKICAgICAgdGhpcy5wYXRoRCA9IG5ldyBBcnJheShzZWdtZW50KS5maWxsKCcnKS5tYXAoZnVuY3Rpb24gKF8sIGkpIHsKICAgICAgICB2YXIgZW5kUG9pbnRzID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSAtIChpICsgMSkgKiBhbmdsZUdhcCkubWFwKGZ1bmN0aW9uIChfKSB7CiAgICAgICAgICByZXR1cm4gXy50b0ZpeGVkKDUpOwogICAgICAgIH0pOwogICAgICAgIHZhciBkID0gIk0iLmNvbmNhdChsYXN0RW5kUG9pbnRzLmpvaW4oJywnKSwgIiBBIikuY29uY2F0KHIsICIsICIpLmNvbmNhdChyLCAiIDAgMCAwICIpLmNvbmNhdChlbmRQb2ludHMuam9pbignLCcpKTsKICAgICAgICBsYXN0RW5kUG9pbnRzID0gZW5kUG9pbnRzOwogICAgICAgIHJldHVybiBkOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjUGF0aENvbG9yOiBmdW5jdGlvbiBjYWxjUGF0aENvbG9yKCkgewogICAgICB2YXIgX3RoaXMkbWVyZ2VkQ29sb3IgPSBfc2xpY2VkVG9BcnJheSh0aGlzLm1lcmdlZENvbG9yLCAxKSwKICAgICAgICBjb2xvciA9IF90aGlzJG1lcmdlZENvbG9yWzBdLAogICAgICAgIHNlZ21lbnQgPSB0aGlzLnNlZ21lbnQ7CiAgICAgIHZhciBjb2xvckdhcCA9IDEwMCAvIChzZWdtZW50IC0gMSk7CiAgICAgIHRoaXMucGF0aENvbG9yID0gbmV3IEFycmF5KHNlZ21lbnQpLmZpbGwoY29sb3IpLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICAgIHJldHVybiBmYWRlKGNvbG9yLCAxMDAgLSBpICogY29sb3JHYXApOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjQ2lyY2xlUjogZnVuY3Rpb24gY2FsY0NpcmNsZVIoKSB7CiAgICAgIHZhciBzZWdtZW50ID0gdGhpcy5zZWdtZW50LAogICAgICAgIHJpbmdOdW0gPSB0aGlzLnJpbmdOdW0sCiAgICAgICAgd2lkdGggPSB0aGlzLndpZHRoLAogICAgICAgIHJpbmdXaWR0aCA9IHRoaXMucmluZ1dpZHRoOwogICAgICB2YXIgcmFkaXVzR2FwID0gKHdpZHRoIC8gMiAtIHJpbmdXaWR0aCAvIDIpIC8gcmluZ051bTsKICAgICAgdGhpcy5jaXJjbGVSID0gbmV3IEFycmF5KHJpbmdOdW0pLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpKSB7CiAgICAgICAgcmV0dXJuIHJhZGl1c0dhcCAqIChpICsgMSk7CiAgICAgIH0pOwogICAgfSwKICAgIGNhbGNTcGxpdExpbmVQb2ludHM6IGZ1bmN0aW9uIGNhbGNTcGxpdExpbmVQb2ludHMoKSB7CiAgICAgIHZhciB4ID0gdGhpcy54LAogICAgICAgIHkgPSB0aGlzLnksCiAgICAgICAgd2lkdGggPSB0aGlzLndpZHRoOwogICAgICB2YXIgYW5nbGVHYXAgPSBNYXRoLlBJIC8gNjsKICAgICAgdmFyIHIgPSB3aWR0aCAvIDI7CiAgICAgIHRoaXMuc3BsaXRMaW5lUG9pbnRzID0gbmV3IEFycmF5KDYpLmZpbGwoJycpLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICAgIHZhciBzdGFydEFuZ2xlID0gYW5nbGVHYXAgKiAoaSArIDEpOwogICAgICAgIHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBNYXRoLlBJOwogICAgICAgIHZhciBzdGFydFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSk7CiAgICAgICAgdmFyIGVuZFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgZW5kQW5nbGUpOwogICAgICAgIHJldHVybiAiIi5jb25jYXQoc3RhcnRQb2ludC5qb2luKCcsJyksICIgIikuY29uY2F0KGVuZFBvaW50LmpvaW4oJywnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGNhbGNBcmNEOiBmdW5jdGlvbiBjYWxjQXJjRCgpIHsKICAgICAgdmFyIHggPSB0aGlzLngsCiAgICAgICAgeSA9IHRoaXMueSwKICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgIHZhciBhbmdsZUdhcCA9IE1hdGguUEkgLyA2OwogICAgICB2YXIgciA9IHdpZHRoIC8gMiAtIDE7CiAgICAgIHRoaXMuYXJjRCA9IG5ldyBBcnJheSg0KS5maWxsKCcnKS5tYXAoZnVuY3Rpb24gKF8sIGkpIHsKICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IGFuZ2xlR2FwICogKDMgKiBpICsgMSk7CiAgICAgICAgdmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGFuZ2xlR2FwOwogICAgICAgIHZhciBzdGFydFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSk7CiAgICAgICAgdmFyIGVuZFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgZW5kQW5nbGUpOwogICAgICAgIHJldHVybiAiTSIuY29uY2F0KHN0YXJ0UG9pbnQuam9pbignLCcpLCAiIEEiKS5jb25jYXQoeCwgIiwgIikuY29uY2F0KHksICIgMCAwIDEgIikuY29uY2F0KGVuZFBvaW50LmpvaW4oJywnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdDogZnVuY3Rpb24gYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0KCkgewogICAgICB2YXIgaW5pdCA9IHRoaXMuaW5pdDsKICAgICAgaW5pdCgpOwogICAgfSwKICAgIGZhZGU6IGZhZGUKICB9Cn07"},{"version":3,"mappings":";;;;;;;AAqGA;AACA;AAEA;AAEA;AAEA;AAEA;EACAA;EACAC;EACAC;IACAC;MACAC;MACAC;QAAA;MAAA;IACA;IACA;AACA;AACA;IACAC;MACAF;MACAC;IACA;IACA;AACA;AACA;IACAE;MACAH;MACAC;IACA;EACA;EACAG;IACA;IACA;MACAC;MACAC;MACAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;IACA;EACA;EACAC;IACArB;MACA;MAEAsB;IACA;EACA;EACAC;IACAC;MACA;MAEA;IACA;IACAC;MACA;MAEA;IACA;EACA;EACAC;IACAC;MACA;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;MAEAV;MAEAM;MAEAC;MAEAC;MAEAC;MAEAC;IACA;IACAV;MACA;QAAAb;MAEA;IACA;IACAmB;MACA;QAAAH;QAAAQ;QAAAjB;QAAAC;MAEA;MACA;MACA;MACA;MAEA,gCACAiB,SACAC;QACA;UAAA;QAAA;QACA;QACAC;QAEA;MACA;IACA;IACAP;MACA;QAAA7B;QAAAgB;MAEA;MAEA,oCACAkB,YACAC;QAAA;MAAA;IACA;IACAL;MACA;QAAAZ;QAAAe;QAAAd;MAEA;MAEA,kCACAe,QACAC;QAAA;MAAA;IACA;IACAJ;MACA;QAAAN;QAAAQ;MAEA;MACA;MAEA,oCACAC,SACAC;QACA;QACA;QACA;QACA;QAEA;MACA;IACA;IACAH;MACA;QAAAP;QAAAQ;MAEA;MACA;MAEA,yBACAC,SACAC;QACA;QACA;QACA;QACA;QAEA;MACA;IACA;IACAE;MACA;MAEAV;IACA;IACAW;EACA;AACA","names":["name","mixins","props","color","type","default","scanDur","haloDur","data","ref","gId","gradientId","defaultColor","mergedColor","pathD","pathColor","circleR","splitLinePoints","arcD","segment","sectorAngle","ringNum","ringWidth","showSplitLine","watch","mergeColor","computed","x","y","methods","init","calcPathD","calcPathColor","calcCircleR","calcSplitLinePoints","calcArcD","width","fill","map","lastEndPoints","afterAutoResizeMixinInit","fade"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration12/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <defs>\n        <g :id=\"gId\">\n          <path\n            :stroke=\"pathColor[i]\"\n            :stroke-width=\"width / 2\"\n            fill=\"transparent\"\n            v-for=\"(d, i) in pathD\"\n            :key=\"d\"\n            :d=\"d\"\n          />\n        </g>\n\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\n        </radialGradient>\n      </defs>\n\n      <circle\n        v-for=\"r in circleR\"\n        :key=\"r\"\n        :r=\"r\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :stroke=\"mergedColor[1]\"\n        :stroke-width=\"0.5\"\n        fill=\"transparent\"\n      />\n\n      <circle\n        r=\"1\"\n        :cx=\"x\"\n        :cy=\"y\"\n        stroke=\"transparent\"\n        :fill=\"`url(#${gradientId})`\"\n      >\n        <animate\n          attributeName=\"r\"\n          :values=\"`1;${width / 2}`\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          values=\"1;0\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        r=\"2\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :fill=\"mergedColor[1]\"\n      />\n\n      <g v-if=\"showSplitLine\">\n        <polyline\n          v-for=\"p in splitLinePoints\"\n          :key=\"p\"\n          :points=\"p\"\n          :stroke=\"mergedColor[1]\"\n          :stroke-width=\"0.5\"\n          opacity=\"0.5\"\n        />\n      </g>\n\n      <path\n        v-for=\"d in arcD\"\n        :key=\"d\"\n        :d=\"d\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        fill=\"transparent\"\n      />\n\n      <use :xlink:href=\"`#${gId}`\">\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\n          :dur=\"`${scanDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n    </svg>\n\n    <div class=\"decoration-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n\n      defaultColor: ['#2783ce', '#2cf7fe'],\n\n      mergedColor: [],\n\n      pathD: [],\n\n      pathColor: [],\n\n      circleR: [],\n\n      splitLinePoints: [],\n\n      arcD: [],\n\n      segment: 30,\n\n      sectorAngle: Math.PI / 3,\n\n      ringNum: 3,\n\n      ringWidth: 1,\n\n      showSplitLine: true\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  computed: {\n    x () {\n      const { width } = this\n\n      return width / 2\n    },\n    y () {\n      const { height } = this\n\n      return height / 2\n    }\n  },\n  methods: {\n    init () {\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\n\n      mergeColor()\n\n      calcPathD()\n\n      calcPathColor()\n\n      calcCircleR()\n\n      calcSplitLinePoints()\n\n      calcArcD()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    calcPathD () {\n      const { x, y, width, segment, sectorAngle } = this\n\n      const startAngle = -Math.PI / 2\n      const angleGap = sectorAngle / segment\n      const r = width / 4\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\n\n      this.pathD = new Array(segment)\n        .fill('')\n        .map((_, i) => {\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\n          lastEndPoints = endPoints\n\n          return d\n        })\n    },\n    calcPathColor () {\n      const { mergedColor: [color], segment } = this\n\n      const colorGap = 100 / (segment - 1)\n\n      this.pathColor = new Array(segment)\n        .fill(color)\n        .map((_, i) => fade(color, 100 - i * colorGap))\n    },\n    calcCircleR () {\n      const { segment, ringNum, width, ringWidth } = this\n\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\n\n      this.circleR = new Array(ringNum)\n        .fill(0)\n        .map((_, i) => radiusGap * (i + 1))\n    },\n    calcSplitLinePoints () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2\n\n      this.splitLinePoints = new Array(6)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (i + 1)\n          const endAngle = startAngle + Math.PI\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\n        })\n    },\n    calcArcD () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2 - 1\n\n      this.arcD = new Array(4)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (3 * i + 1)\n          const endAngle = startAngle + angleGap\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\n        })\n    },\n    afterAutoResizeMixinInit () {\n      const { init } = this\n\n      init()\n    },\n    fade\n  }\n}\n</script>"]}]}